{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.edit.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\($locale).account.edit.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\($locale).account.edit.jsx\");\n  import.meta.hot.lastModified = \"1696849699244.4453\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@shopify/remix-oxygen';\nimport { useActionData, Form, useOutletContext, useNavigation } from '@remix-run/react';\nimport clsx from 'clsx';\nimport invariant from 'tiny-invariant';\nimport { Button, Text } from '~/components';\nimport { getInputStyleClasses, assertApiErrors } from '~/lib/utils';\nimport { getCustomer } from './($locale).account';\nconst badRequest = data => json(data, {\n  status: 400\n});\nconst formDataHas = (formData, key) => {\n  if (!formData.has(key)) return false;\n  const value = formData.get(key);\n  return typeof value === 'string' && value.length > 0;\n};\nexport const handle = {\n  renderInModal: true\n};\nexport const action = async ({\n  request,\n  context,\n  params\n}) => {\n  const formData = await request.formData();\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  invariant(customerAccessToken, 'You must be logged in to update your account details.');\n\n  // Double-check current user is logged in.\n  // Will throw a logout redirect if not.\n  await getCustomer(context, customerAccessToken);\n  if (formDataHas(formData, 'newPassword') && !formDataHas(formData, 'currentPassword')) {\n    return badRequest({\n      fieldErrors: {\n        currentPassword: 'Please enter your current password before entering a new password.'\n      }\n    });\n  }\n  if (formData.has('newPassword') && formData.get('newPassword') !== formData.get('newPassword2')) {\n    return badRequest({\n      fieldErrors: {\n        newPassword2: 'New passwords must match.'\n      }\n    });\n  }\n  try {\n    const customer = {};\n    formDataHas(formData, 'firstName') && (customer.firstName = formData.get('firstName'));\n    formDataHas(formData, 'lastName') && (customer.lastName = formData.get('lastName'));\n    formDataHas(formData, 'email') && (customer.email = formData.get('email'));\n    formDataHas(formData, 'phone') && (customer.phone = formData.get('phone'));\n    formDataHas(formData, 'newPassword') && (customer.password = formData.get('newPassword'));\n    const data = await context.storefront.mutate(CUSTOMER_UPDATE_MUTATION, {\n      variables: {\n        customerAccessToken,\n        customer\n      }\n    });\n    assertApiErrors(data.customerUpdate);\n    return redirect(params?.locale ? `${params.locale}/account` : '/account');\n  } catch (error) {\n    return badRequest({\n      formError: error.message\n    });\n  }\n};\n\n/**\r\n * Since this component is nested in `accounts/`, it is rendered in a modal via `<Outlet>` in `account.tsx`.\r\n *\r\n * This allows us to:\r\n * - preserve URL state (`/accounts/edit` when the modal is open)\r\n * - co-locate the edit action with the edit form (rather than grouped in account.tsx)\r\n * - use the `useOutletContext` hook to access the customer data from the parent route (no additional data loading)\r\n * - return a simple `redirect()` from this action to close the modal :mindblown: (no useState/useEffect)\r\n * - use the presence of outlet data (in `account.tsx`) to open/close the modal (no useState)\r\n */\nexport default function AccountDetailsEdit() {\n  _s();\n  const actionData = useActionData();\n  const {\n    customer\n  } = useOutletContext();\n  const {\n    state\n  } = useNavigation();\n  return <>\r\n      <Text className=\"mt-4 mb-6\" as=\"h3\" size=\"lead\">\r\n        Update your profile\r\n      </Text>\r\n      <Form method=\"post\">\r\n        {actionData?.formError && <div className=\"flex items-center justify-center mb-6 bg-red-100 rounded\">\r\n            <p className=\"m-4 text-sm text-red-900\">{actionData.formError}</p>\r\n          </div>}\r\n        <div className=\"mt-3\">\r\n          <input className={getInputStyleClasses()} id=\"firstName\" name=\"firstName\" type=\"text\" autoComplete=\"given-name\" placeholder=\"First name\" aria-label=\"First name\" defaultValue={customer.firstName ?? ''} />\r\n        </div>\r\n        <div className=\"mt-3\">\r\n          <input className={getInputStyleClasses()} id=\"lastName\" name=\"lastName\" type=\"text\" autoComplete=\"family-name\" placeholder=\"Last name\" aria-label=\"Last name\" defaultValue={customer.lastName ?? ''} />\r\n        </div>\r\n        <div className=\"mt-3\">\r\n          <input className={getInputStyleClasses()} id=\"phone\" name=\"phone\" type=\"tel\" autoComplete=\"tel\" placeholder=\"Mobile\" aria-label=\"Mobile\" defaultValue={customer.phone ?? ''} />\r\n        </div>\r\n        <div className=\"mt-3\">\r\n          <input className={getInputStyleClasses(actionData?.fieldErrors?.email)} id=\"email\" name=\"email\" type=\"email\" autoComplete=\"email\" required placeholder=\"Email address\" aria-label=\"Email address\" defaultValue={customer.email ?? ''} />\r\n          {actionData?.fieldErrors?.email && <p className=\"text-red-500 text-xs\">\r\n              {actionData.fieldErrors.email} &nbsp;\r\n            </p>}\r\n        </div>\r\n        <Text className=\"mb-6 mt-6\" as=\"h3\" size=\"lead\">\r\n          Change your password\r\n        </Text>\r\n        <Password name=\"currentPassword\" label=\"Current password\" passwordError={actionData?.fieldErrors?.currentPassword} />\r\n        {actionData?.fieldErrors?.currentPassword && <Text size=\"fine\" className=\"mt-1 text-red-500\">\r\n            {actionData.fieldErrors.currentPassword} &nbsp;\r\n          </Text>}\r\n        <Password name=\"newPassword\" label=\"New password\" passwordError={actionData?.fieldErrors?.newPassword} />\r\n        <Password name=\"newPassword2\" label=\"Re-enter new password\" passwordError={actionData?.fieldErrors?.newPassword2} />\r\n        <Text size=\"fine\" color=\"subtle\" className={clsx('mt-1', actionData?.fieldErrors?.newPassword && 'text-red-500')}>\r\n          Passwords must be at least 8 characters.\r\n        </Text>\r\n        {actionData?.fieldErrors?.newPassword2 ? <br /> : null}\r\n        {actionData?.fieldErrors?.newPassword2 && <Text size=\"fine\" className=\"mt-1 text-red-500\">\r\n            {actionData.fieldErrors.newPassword2} &nbsp;\r\n          </Text>}\r\n        <div className=\"mt-6\">\r\n          <Button className=\"text-sm mb-2\" variant=\"primary\" width=\"full\" type=\"submit\" disabled={state !== 'idle'}>\r\n            {state !== 'idle' ? 'Saving' : 'Save'}\r\n          </Button>\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <Button to=\"..\" className=\"text-sm\" variant=\"secondary\" width=\"full\">\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </>;\n}\n_s(AccountDetailsEdit, \"VDh1DfaE6930SFn1ar7dGIFv1jY=\", false, function () {\n  return [useActionData, useOutletContext, useNavigation];\n});\n_c = AccountDetailsEdit;\nfunction Password({\n  name,\n  passwordError,\n  label\n}) {\n  return <div className=\"mt-3\">\r\n      <input className={getInputStyleClasses(passwordError)} id={name} name={name} type=\"password\" autoComplete={name === 'currentPassword' ? 'current-password' : undefined} placeholder={label} aria-label={label} minLength={8} />\r\n    </div>;\n}\n_c2 = Password;\nconst CUSTOMER_UPDATE_MUTATION = `#graphql\n  mutation customerUpdate($customerAccessToken: String!, $customer: CustomerUpdateInput!) {\n    customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n  `;\nvar _c, _c2;\n$RefreshReg$(_c, \"AccountDetailsEdit\");\n$RefreshReg$(_c2, \"Password\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GS;AAzGT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kDAAoD,EAAE;AAAA,EAC/F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyC;AACzC,cAAY,IAAI,eAAe;AACjC;AAkBO,IAAM,SAAS;AAAA,EACpB,eAAe;AACjB;AA2De,SAAR,qBAAsC;AAC3C,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,iBAAiB;AACrB,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,sFACH;AAAA,uDAAC,QAAK,WAAU,aAAY,IAAG,MAAK,MAAK,QAAO,mCAAhD;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,QAAK,QAAO,QACV;AAAA,kBAAY,aAAa,mDAAC,SAAI,WAAU,4DACrC,6DAAC,OAAE,WAAU,4BAA4B,qBAAW,aAApD;AAAA;AAAA;AAAA;AAAA,aAA8D,KADxC;AAAA;AAAA;AAAA;AAAA,aAExB;AAAA,MACF,mDAAC,SAAI,WAAU,QACb,6DAAC,WAAM,WAAW,qBAAqB,GAAG,IAAG,aAAY,MAAK,aAAY,MAAK,QAAO,cAAa,cAAa,aAAY,cAAa,cAAW,cAAa,cAAc,SAAS,aAAa,MAArM;AAAA;AAAA;AAAA;AAAA,aAAyM,KAD3M;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SAAI,WAAU,QACb,6DAAC,WAAM,WAAW,qBAAqB,GAAG,IAAG,YAAW,MAAK,YAAW,MAAK,QAAO,cAAa,eAAc,aAAY,aAAY,cAAW,aAAY,cAAc,SAAS,YAAY,MAAjM;AAAA;AAAA;AAAA;AAAA,aAAqM,KADvM;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SAAI,WAAU,QACb,6DAAC,WAAM,WAAW,qBAAqB,GAAG,IAAG,SAAQ,MAAK,SAAQ,MAAK,OAAM,cAAa,OAAM,aAAY,UAAS,cAAW,UAAS,cAAc,SAAS,SAAS,MAAzK;AAAA;AAAA;AAAA;AAAA,aAA6K,KAD/K;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,WAAM,WAAW,qBAAqB,YAAY,aAAa,KAAK,GAAG,IAAG,SAAQ,MAAK,SAAQ,MAAK,SAAQ,cAAa,SAAQ,UAAQ,MAAC,aAAY,iBAAgB,cAAW,iBAAgB,cAAc,SAAS,SAAS,MAAlO;AAAA;AAAA;AAAA;AAAA,eAAsO;AAAA,QACrO,YAAY,aAAa,SAAS,mDAAC,OAAE,WAAU,wBAC3C;AAAA,qBAAW,YAAY;AAAA,UAAM;AAAA,aADC;AAAA;AAAA;AAAA;AAAA,eAEjC;AAAA,WAJJ;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,QAAK,WAAU,aAAY,IAAG,MAAK,MAAK,QAAO,oCAAhD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,YAAS,MAAK,mBAAkB,OAAM,oBAAmB,eAAe,YAAY,aAAa,mBAAlG;AAAA;AAAA;AAAA;AAAA,aAAmH;AAAA,MAClH,YAAY,aAAa,mBAAmB,mDAAC,QAAK,MAAK,QAAO,WAAU,qBACpE;AAAA,mBAAW,YAAY;AAAA,QAAgB;AAAA,WADC;AAAA;AAAA;AAAA;AAAA,aAE3C;AAAA,MACF,mDAAC,YAAS,MAAK,eAAc,OAAM,gBAAe,eAAe,YAAY,aAAa,eAA1F;AAAA;AAAA;AAAA;AAAA,aAAuG;AAAA,MACvG,mDAAC,YAAS,MAAK,gBAAe,OAAM,yBAAwB,eAAe,YAAY,aAAa,gBAApG;AAAA;AAAA;AAAA;AAAA,aAAkH;AAAA,MAClH,mDAAC,QAAK,MAAK,QAAO,OAAM,UAAS,WAAW,eAAK,QAAQ,YAAY,aAAa,eAAe,cAAc,GAAG,wDAAlH;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACC,YAAY,aAAa,eAAe,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI,IAAK;AAAA,MACjD,YAAY,aAAa,gBAAgB,mDAAC,QAAK,MAAK,QAAO,WAAU,qBACjE;AAAA,mBAAW,YAAY;AAAA,QAAa;AAAA,WADC;AAAA;AAAA;AAAA;AAAA,aAExC;AAAA,MACF,mDAAC,SAAI,WAAU,QACb,6DAAC,UAAO,WAAU,gBAAe,SAAQ,WAAU,OAAM,QAAO,MAAK,UAAS,UAAU,UAAU,QAC/F,oBAAU,SAAS,WAAW,UADjC;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,SAAI,WAAU,QACb,6DAAC,UAAO,IAAG,MAAK,WAAU,WAAU,SAAQ,aAAY,OAAM,QAAO,sBAArE;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SA5CF;AAAA;AAAA;AAAA;AAAA,WA6CA;AAAA,OAjDG;AAAA;AAAA;AAAA;AAAA,SAkDL;AACJ;AACA,GAAG,oBAAoB,gCAAgC,OAAO,WAAY;AACxE,SAAO,CAAC,eAAe,kBAAkB,aAAa;AACxD,CAAC;AACD,KAAK;AACL,SAAS,SAAS;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,SAAO,mDAAC,SAAI,WAAU,QAClB,6DAAC,WAAM,WAAW,qBAAqB,aAAa,GAAG,IAAI,MAAM,MAAY,MAAK,YAAW,cAAc,SAAS,oBAAoB,qBAAqB,QAAW,aAAa,OAAO,cAAY,OAAO,WAAW,KAA1N;AAAA;AAAA;AAAA;AAAA,SAA6N,KAD1N;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,MAAM;AAYN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,oBAAoB;AACrC,aAAa,KAAK,UAAU;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
