{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.activate.$id.$activationToken.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\($locale).account.activate.$id.$activationToken.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\($locale).account.activate.$id.$activationToken.jsx\");\n  import.meta.hot.lastModified = \"1696849699243.4497\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, useActionData } from '@remix-run/react';\nimport { useRef, useState } from 'react';\nimport { getInputStyleClasses } from '~/lib/utils';\nconst badRequest = data => json(data, {\n  status: 400\n});\nexport const handle = {\n  isPublic: true\n};\nexport const action = async ({\n  request,\n  context,\n  params: {\n    locale,\n    id,\n    activationToken\n  }\n}) => {\n  if (!id || !activationToken || typeof id !== 'string' || typeof activationToken !== 'string') {\n    return badRequest({\n      formError: 'Wrong token. The link you followed might be wrong.'\n    });\n  }\n  const formData = await request.formData();\n  const password = formData.get('password');\n  const passwordConfirm = formData.get('passwordConfirm');\n  if (!password || !passwordConfirm || typeof password !== 'string' || typeof passwordConfirm !== 'string' || password !== passwordConfirm) {\n    return badRequest({\n      formError: 'Please provide matching passwords'\n    });\n  }\n  const {\n    session,\n    storefront\n  } = context;\n  try {\n    const data = await storefront.mutate(CUSTOMER_ACTIVATE_MUTATION, {\n      variables: {\n        id: `gid://shopify/Customer/${id}`,\n        input: {\n          password,\n          activationToken\n        }\n      }\n    });\n    const {\n      accessToken\n    } = data?.customerActivate?.customerAccessToken ?? {};\n    if (!accessToken) {\n      /**\r\n       * Something is wrong with the user's input.\r\n       */\n      throw new Error(data?.customerActivate?.customerUserErrors.join(', '));\n    }\n    session.set('customerAccessToken', accessToken);\n    return redirect(locale ? `${locale}/account` : '/account', {\n      headers: {\n        'Set-Cookie': await session.commit()\n      }\n    });\n  } catch (error) {\n    if (storefront.isApiError(error)) {\n      return badRequest({\n        formError: 'Something went wrong. Please try again later.'\n      });\n    }\n\n    /**\r\n     * The user did something wrong, but the raw error from the API is not super friendly.\r\n     * Let's make one up.\r\n     */\n    return badRequest({\n      formError: 'Sorry. We could not activate your account.'\n    });\n  }\n};\nexport const meta = () => {\n  return [{\n    title: 'Activate Account'\n  }];\n};\nexport default function Activate() {\n  _s();\n  const actionData = useActionData();\n  const [nativePasswordError, setNativePasswordError] = useState(null);\n  const [nativePasswordConfirmError, setNativePasswordConfirmError] = useState(null);\n  const passwordInput = useRef(null);\n  const passwordConfirmInput = useRef(null);\n  const validatePasswordConfirm = () => {\n    if (!passwordConfirmInput.current) return;\n    if (passwordConfirmInput.current.value.length && passwordConfirmInput.current.value !== passwordInput.current?.value) {\n      setNativePasswordConfirmError('The two passwords entered did not match.');\n    } else if (passwordConfirmInput.current.validity.valid || !passwordConfirmInput.current.value.length) {\n      setNativePasswordConfirmError(null);\n    } else {\n      setNativePasswordConfirmError(passwordConfirmInput.current.validity.valueMissing ? 'Please re-enter the password' : 'Passwords must be at least 8 characters');\n    }\n  };\n  return <div className=\"flex justify-center my-24 px-4\">\r\n       <div className=\"max-w-md w-full\">\r\n        <h1 className=\"text-4xl\">Activate Account.</h1>\r\n        <p className=\"mt-4\">Create your password to activate your account.</p>\r\n        <Form method=\"post\" noValidate className=\"pt-6 pb-8 mt-4 mb-4 space-y-3\">\r\n          {actionData?.formError && <div className=\"flex items-center justify-center mb-6 bg-zinc-500\">\r\n              <p className=\"m-4 text-s text-contrast\">{actionData.formError}</p>\r\n            </div>}\r\n          <div className=\"mb-3\">\r\n            <input ref={passwordInput} className={`mb-1 ${getInputStyleClasses(nativePasswordError)}`} id=\"password\" name=\"password\" type=\"password\" autoComplete=\"current-password\" placeholder=\"Password\" aria-label=\"Password\" minLength={8} required\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus onBlur={event => {\n            if (event.currentTarget.validity.valid || !event.currentTarget.value.length) {\n              setNativePasswordError(null);\n              validatePasswordConfirm();\n            } else {\n              setNativePasswordError(event.currentTarget.validity.valueMissing ? 'Please enter a password' : 'Passwords must be at least 8 characters');\n            }\n          }} />\r\n            {nativePasswordError && <p className=\"text-red-500 text-xs\">\r\n                {' '}\r\n                {nativePasswordError} &nbsp;\r\n              </p>}\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <input ref={passwordConfirmInput} className={`mb-1 ${getInputStyleClasses(nativePasswordConfirmError)}`} id=\"passwordConfirm\" name=\"passwordConfirm\" type=\"password\" autoComplete=\"current-password\" placeholder=\"Re-enter password\" aria-label=\"Re-enter password\" minLength={8} required\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus onBlur={validatePasswordConfirm} />\r\n            {nativePasswordConfirmError && <p className=\"text-red-500 text-xs\">\r\n                {' '}\r\n                {nativePasswordConfirmError} &nbsp;\r\n              </p>}\r\n          </div>\r\n          <div className=\"flex items-center justify-between\">\r\n            <button className=\"bg-primary text-contrast rounded py-2 px-4 focus:shadow-outline block w-full\" type=\"submit\">\r\n              Save\r\n            </button>\r\n          </div>\r\n        </Form>\r\n      </div> \r\n    </div>;\n}\n_s(Activate, \"sd9Q/tIV5yqkG2kR3QpyUz0phuE=\", false, function () {\n  return [useActionData];\n});\n_c = Activate;\nconst CUSTOMER_ACTIVATE_MUTATION = `#graphql\n  mutation customerActivate($id: ID!, $input: CustomerActivateInput!) {\n    customerActivate(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\nvar _c;\n$RefreshReg$(_c, \"Activate\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
