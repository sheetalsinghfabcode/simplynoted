{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).collections.$collectionHandle.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\($locale).collections.$collectionHandle.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\($locale).collections.$collectionHandle.jsx\");\n  import.meta.hot.lastModified = \"1696490276889.9521\";\n}\n// REMIX HMR END\n\nimport { json } from '@shopify/remix-oxygen';\nimport { useLoaderData } from '@remix-run/react';\nimport { flattenConnection, AnalyticsPageType, Pagination, getPaginationVariables } from '@shopify/hydrogen';\nimport invariant from 'tiny-invariant';\nimport { PageHeader, Section, Text, SortFilter, Grid, ProductCard, Button } from '~/components';\nimport { PRODUCT_CARD_FRAGMENT } from '~/data/fragments';\nimport { routeHeaders } from '~/data/cache';\nimport { seoPayload } from '~/lib/seo.server';\nimport { getImageLoadingPriority } from '~/lib/const';\nexport const headers = routeHeaders;\nexport async function loader({\n  params,\n  request,\n  context\n}) {\n  const paginationVariables = getPaginationVariables(request, {\n    pageBy: 8\n  });\n  const {\n    collectionHandle\n  } = params;\n  invariant(collectionHandle, 'Missing collectionHandle param');\n  const searchParams = new URL(request.url).searchParams;\n  const knownFilters = ['productVendor', 'productType'];\n  const available = 'available';\n  const variantOption = 'variantOption';\n  const {\n    sortKey,\n    reverse\n  } = getSortValuesFromParam(searchParams.get('sort'));\n  const filters = [];\n  const appliedFilters = [];\n  for (const [key, value] of searchParams.entries()) {\n    if (available === key) {\n      filters.push({\n        available: value === 'true'\n      });\n      appliedFilters.push({\n        label: value === 'true' ? 'In stock' : 'Out of stock',\n        urlParam: {\n          key: available,\n          value\n        }\n      });\n    } else if (knownFilters.includes(key)) {\n      filters.push({\n        [key]: value\n      });\n      appliedFilters.push({\n        label: value,\n        urlParam: {\n          key,\n          value\n        }\n      });\n    } else if (key.includes(variantOption)) {\n      const [name, val] = value.split(':');\n      filters.push({\n        variantOption: {\n          name,\n          value: val\n        }\n      });\n      appliedFilters.push({\n        label: val,\n        urlParam: {\n          key,\n          value\n        }\n      });\n    }\n  }\n\n  // Builds min and max price filter since we can't stack them separately into\n  // the filters array. See price filters limitations:\n  // https://shopify.dev/custom-storefronts/products-collections/filter-products#limitations\n  if (searchParams.has('minPrice') || searchParams.has('maxPrice')) {\n    const price = {};\n    if (searchParams.has('minPrice')) {\n      price.min = Number(searchParams.get('minPrice')) || 0;\n      appliedFilters.push({\n        label: `Min: $${price.min}`,\n        urlParam: {\n          key: 'minPrice',\n          value: searchParams.get('minPrice')\n        }\n      });\n    }\n    if (searchParams.has('maxPrice')) {\n      price.max = Number(searchParams.get('maxPrice')) || 0;\n      appliedFilters.push({\n        label: `Max: $${price.max}`,\n        urlParam: {\n          key: 'maxPrice',\n          value: searchParams.get('maxPrice')\n        }\n      });\n    }\n    filters.push({\n      price\n    });\n  }\n  const {\n    collection,\n    collections\n  } = await context.storefront.query(COLLECTION_QUERY, {\n    variables: {\n      ...paginationVariables,\n      handle: collectionHandle,\n      filters,\n      sortKey,\n      reverse,\n      country: context.storefront.i18n.country,\n      language: context.storefront.i18n.language\n    }\n  });\n  console.log(collection, \"--------------\");\n  if (!collection) {\n    throw new Response('collection', {\n      status: 404\n    });\n  }\n  const seo = seoPayload.collection({\n    collection,\n    url: request.url\n  });\n  return json({\n    collection,\n    appliedFilters,\n    collections: flattenConnection(collections),\n    analytics: {\n      pageType: AnalyticsPageType.collection,\n      collectionHandle,\n      resourceId: collection.id\n    },\n    seo\n  });\n}\nexport default function Collection() {\n  _s();\n  const {\n    collection,\n    collections,\n    appliedFilters\n  } = useLoaderData();\n  return <>\r\n      <PageHeader heading={collection.title}>\r\n        {collection?.description && <div className=\"flex items-baseline justify-between w-full\">\r\n            <div>\r\n              <Text format width=\"narrow\" as=\"p\" className=\"inline-block\">\r\n                {collection.description}\r\n              </Text>\r\n            </div>\r\n          </div>}\r\n      </PageHeader>\r\n      <Section>\r\n        <SortFilter filters={collection.products.filters} appliedFilters={appliedFilters} collections={collections}>\r\n          <Pagination connection={collection.products}>\r\n            {({\n            nodes,\n            isLoading,\n            PreviousLink,\n            NextLink\n          }) => <>\r\n                <div className=\"flex items-center justify-center mb-6\">\r\n                  <Button as={PreviousLink} variant=\"secondary\" width=\"full\">\r\n                    {isLoading ? 'Loading...' : 'Load previous'}\r\n                  </Button>\r\n                </div>\r\n                <Grid layout=\"products\">\r\n                  {nodes.map((product, i) => <ProductCard key={product.id} product={product} loading={getImageLoadingPriority(i)} />)}\r\n                </Grid>\r\n                <div className=\"flex items-center justify-center mt-6\">\r\n                  <Button as={NextLink} variant=\"secondary\" width=\"full\">\r\n                    {isLoading ? 'Loading...' : 'Load more products'}\r\n                  </Button>\r\n                </div>\r\n              </>}\r\n          </Pagination>\r\n        </SortFilter>\r\n      </Section>\r\n    </>;\n}\n_s(Collection, \"6UP0h0wb8XlcyDXP/DCzW2JtDuk=\", false, function () {\n  return [useLoaderData];\n});\n_c = Collection;\nconst COLLECTION_QUERY = `#graphql\n  query CollectionDetails(\n    $handle: String!\n    $country: CountryCode\n    $language: LanguageCode\n    $filters: [ProductFilter!]\n    $sortKey: ProductCollectionSortKeys!\n    $reverse: Boolean\n    $first: Int\n    $last: Int\n    $startCursor: String\n    $endCursor: String\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      id\n      handle\n      title\n      description\n      seo {\n        description\n        title\n      }\n      image {\n        id\n        url\n        width\n        height\n        altText\n      }\n      products(\n        first: $first,\n        last: $last,\n        before: $startCursor,\n        after: $endCursor,\n        filters: $filters,\n        sortKey: $sortKey,\n        reverse: $reverse\n      ) {\n        filters {\n          id\n          label\n          type\n          values {\n            id\n            label\n            count\n            input\n          }\n        }\n        nodes {\n          ...ProductCard\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          hasNextPage\n          endCursor\n          startCursor\n        }\n      }\n    }\n    collections(first: 100) {\n      edges {\n        node {\n          title\n          handle\n        }\n      }\n    }\n  }\n  ${PRODUCT_CARD_FRAGMENT}\n`;\nfunction getSortValuesFromParam(sortParam) {\n  switch (sortParam) {\n    case 'price-high-low':\n      return {\n        sortKey: 'PRICE',\n        reverse: true\n      };\n    case 'price-low-high':\n      return {\n        sortKey: 'PRICE',\n        reverse: false\n      };\n    case 'best-selling':\n      return {\n        sortKey: 'BEST_SELLING',\n        reverse: false\n      };\n    case 'newest':\n      return {\n        sortKey: 'CREATED',\n        reverse: true\n      };\n    case 'featured':\n      return {\n        sortKey: 'MANUAL',\n        reverse: false\n      };\n    default:\n      return {\n        sortKey: 'RELEVANCE',\n        reverse: false\n      };\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Collection\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,iBAA2B;AA8Ib;AAzKd,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mEAAqE,EAAE;AAAA,EAChH;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA0D;AAC1D,cAAY,IAAI,eAAe;AACjC;AA6Ie,SAAR,aAA8B;AACnC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,sFACH;AAAA,uDAAC,cAAW,SAAS,WAAW,OAC7B,sBAAY,eAAe,mDAAC,SAAI,WAAU,8CACvC,6DAAC,SACC,6DAAC,QAAK,QAAM,MAAC,OAAM,UAAS,IAAG,KAAI,WAAU,gBAC1C,qBAAW,eADd;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA,KALwB;AAAA;AAAA;AAAA;AAAA,WAM1B,KAPJ;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,IACA,mDAAC,WACC,6DAAC,cAAW,SAAS,WAAW,SAAS,SAAS,gBAAgC,aAChF,6DAAC,MAAW,YAAY,WAAW,UAChC,WAAC;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,MAAM,sFACA;AAAA,yDAAC,SAAI,WAAU,yCACb,6DAAC,UAAO,IAAI,cAAc,SAAQ,aAAY,OAAM,QACjD,sBAAY,eAAe,mBAD9B;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,QAAK,QAAO,YACV,gBAAM,IAAI,CAAC,SAAS,MAAM,mDAAC,eAA6B,SAAkB,SAAS,wBAAwB,CAAC,KAAhE,QAAQ,IAA1B;AAAA;AAAA;AAAA;AAAA,aAAqF,CAAE,KADpH;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SAAI,WAAU,yCACb,6DAAC,UAAO,IAAI,UAAU,SAAQ,aAAY,OAAM,QAC7C,sBAAY,eAAe,wBAD9B;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SAbA;AAAA;AAAA;AAAA;AAAA,WAcF,KApBJ;AAAA;AAAA;AAAA;AAAA,WAqBA,KAtBF;AAAA;AAAA;AAAA;AAAA,WAuBA,KAxBF;AAAA;AAAA;AAAA;AAAA,WAyBA;AAAA,OAnCG;AAAA;AAAA;AAAA;AAAA,SAoCL;AACJ;AACA,GAAG,YAAY,gCAAgC,OAAO,WAAY;AAChE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsErB;AAAA;AAoCJ,IAAI;AACJ,aAAa,IAAI,YAAY;AAE7B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
