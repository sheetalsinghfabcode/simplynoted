{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.address.$id.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\($locale).account.address.$id.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\($locale).account.address.$id.jsx\");\n  import.meta.hot.lastModified = \"1696490276877.9387\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, useActionData, useOutletContext, useParams, useNavigation } from '@remix-run/react';\nimport { flattenConnection } from '@shopify/hydrogen';\nimport invariant from 'tiny-invariant';\nimport { Button, Text } from '~/components';\nimport { assertApiErrors, getInputStyleClasses } from '~/lib/utils';\nconst badRequest = data => json(data, {\n  status: 400\n});\nexport const handle = {\n  renderInModal: true\n};\nexport const action = async ({\n  request,\n  context,\n  params\n}) => {\n  const {\n    storefront,\n    session\n  } = context;\n  const formData = await request.formData();\n  const customerAccessToken = await session.get('customerAccessToken');\n  invariant(customerAccessToken, 'You must be logged in to edit your account.');\n  const addressId = formData.get('addressId');\n  invariant(typeof addressId === 'string', 'You must provide an address id.');\n  if (request.method === 'DELETE') {\n    try {\n      const data = await storefront.mutate(DELETE_ADDRESS_MUTATION, {\n        variables: {\n          customerAccessToken,\n          id: addressId\n        }\n      });\n      assertApiErrors(data.customerAddressDelete);\n      return redirect(params.locale ? `${params.locale}/account` : '/account');\n    } catch (error) {\n      return badRequest({\n        formError: error.message\n      });\n    }\n  }\n  const address = {};\n  const keys = ['lastName', 'firstName', 'address1', 'address2', 'city', 'province', 'country', 'zip', 'phone', 'company'];\n  for (const key of keys) {\n    const value = formData.get(key);\n    if (typeof value === 'string') {\n      address[key] = value;\n    }\n  }\n  const defaultAddress = formData.get('defaultAddress');\n  if (addressId === 'add') {\n    try {\n      const data = await storefront.mutate(CREATE_ADDRESS_MUTATION, {\n        variables: {\n          customerAccessToken,\n          address\n        }\n      });\n      assertApiErrors(data.customerAddressCreate);\n      const newId = data.customerAddressCreate?.customerAddress?.id;\n      invariant(newId, 'Expected customer address to be created');\n      if (defaultAddress) {\n        const data = await storefront.mutate(UPDATE_DEFAULT_ADDRESS_MUTATION, {\n          variables: {\n            customerAccessToken,\n            addressId: newId\n          }\n        });\n        assertApiErrors(data.customerDefaultAddressUpdate);\n      }\n      return redirect(params.locale ? `${params.locale}/account` : '/account');\n    } catch (error) {\n      return badRequest({\n        formError: error.message\n      });\n    }\n  } else {\n    try {\n      const data = await storefront.mutate(UPDATE_ADDRESS_MUTATION, {\n        variables: {\n          address,\n          customerAccessToken,\n          id: decodeURIComponent(addressId)\n        }\n      });\n      assertApiErrors(data.customerAddressUpdate);\n      if (defaultAddress) {\n        const data = await storefront.mutate(UPDATE_DEFAULT_ADDRESS_MUTATION, {\n          variables: {\n            customerAccessToken,\n            addressId: decodeURIComponent(addressId)\n          }\n        });\n        assertApiErrors(data.customerDefaultAddressUpdate);\n      }\n      return redirect(params.locale ? `${params.locale}/account` : '/account');\n    } catch (error) {\n      return badRequest({\n        formError: error.message\n      });\n    }\n  }\n};\nexport default function EditAddress() {\n  _s();\n  const {\n    id: addressId\n  } = useParams();\n  const isNewAddress = addressId === 'add';\n  const actionData = useActionData();\n  const {\n    state\n  } = useNavigation();\n  const {\n    customer\n  } = useOutletContext();\n  const addresses = flattenConnection(customer.addresses);\n  const defaultAddress = customer.defaultAddress;\n  /**\r\n   * When a refresh happens (or a user visits this link directly), the URL\r\n   * is actually stale because it contains a special token. This means the data\r\n   * loaded by the parent and passed to the outlet contains a newer, fresher token,\r\n   * and we don't find a match. We update the `find` logic to just perform a match\r\n   * on the first (permanent) part of the ID.\r\n   */\n  const normalizedAddress = decodeURIComponent(addressId ?? '').split('?')[0];\n  const address = addresses.find(address => address.id.startsWith(normalizedAddress));\n  return <>\r\n      <Text className=\"mt-4 mb-6\" as=\"h3\" size=\"lead\">\r\n        {isNewAddress ? 'Add address' : 'Edit address'}\r\n      </Text>\r\n      <div className=\"max-w-lg\">\r\n        <Form method=\"post\">\r\n          <input type=\"hidden\" name=\"addressId\" value={address?.id ?? addressId} />\r\n          {actionData?.formError && <div className=\"flex items-center justify-center mb-6 bg-red-100 rounded\">\r\n              <p className=\"m-4 text-sm text-red-900\">{actionData.formError}</p>\r\n            </div>}\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"firstName\" name=\"firstName\" required type=\"text\" autoComplete=\"given-name\" placeholder=\"First name\" aria-label=\"First name\" defaultValue={address?.firstName ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"lastName\" name=\"lastName\" required type=\"text\" autoComplete=\"family-name\" placeholder=\"Last name\" aria-label=\"Last name\" defaultValue={address?.lastName ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"company\" name=\"company\" type=\"text\" autoComplete=\"organization\" placeholder=\"Company\" aria-label=\"Company\" defaultValue={address?.company ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"address1\" name=\"address1\" type=\"text\" autoComplete=\"address-line1\" placeholder=\"Address line 1*\" required aria-label=\"Address line 1\" defaultValue={address?.address1 ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"address2\" name=\"address2\" type=\"text\" autoComplete=\"address-line2\" placeholder=\"Address line 2\" aria-label=\"Address line 2\" defaultValue={address?.address2 ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"city\" name=\"city\" type=\"text\" required autoComplete=\"address-level2\" placeholder=\"City\" aria-label=\"City\" defaultValue={address?.city ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"province\" name=\"province\" type=\"text\" autoComplete=\"address-level1\" placeholder=\"State / Province\" required aria-label=\"State\" defaultValue={address?.province ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"zip\" name=\"zip\" type=\"text\" autoComplete=\"postal-code\" placeholder=\"Zip / Postal Code\" required aria-label=\"Zip\" defaultValue={address?.zip ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"country\" name=\"country\" type=\"text\" autoComplete=\"country-name\" placeholder=\"Country\" required aria-label=\"Country\" defaultValue={address?.country ?? ''} />\r\n          </div>\r\n          <div className=\"mt-3\">\r\n            <input className={getInputStyleClasses()} id=\"phone\" name=\"phone\" type=\"tel\" autoComplete=\"tel\" placeholder=\"Phone\" aria-label=\"Phone\" defaultValue={address?.phone ?? ''} />\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <input type=\"checkbox\" name=\"defaultAddress\" id=\"defaultAddress\" defaultChecked={defaultAddress?.id === address?.id} className=\"border-gray-500 rounded-sm cursor-pointer border-1\" />\r\n            <label className=\"inline-block ml-2 text-sm cursor-pointer\" htmlFor=\"defaultAddress\">\r\n              Set as default address\r\n            </label>\r\n          </div>\r\n          <div className=\"mt-8\">\r\n            <Button className=\"w-full rounded focus:shadow-outline\" type=\"submit\" variant=\"primary\" disabled={state !== 'idle'}>\r\n              {state !== 'idle' ? 'Saving' : 'Save'}\r\n            </Button>\r\n          </div>\r\n          <div>\r\n            <Button to=\"..\" className=\"w-full mt-2 rounded focus:shadow-outline\" variant=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>;\n}\n_s(EditAddress, \"tvhd2TRxa2lQwNnREW5amCMmNHU=\", false, function () {\n  return [useParams, useActionData, useNavigation, useOutletContext];\n});\n_c = EditAddress;\nconst UPDATE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressUpdate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $id: ID!\n  ) {\n    customerAddressUpdate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n      id: $id\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\nconst DELETE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressDelete($customerAccessToken: String!, $id: ID!) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n`;\nconst UPDATE_DEFAULT_ADDRESS_MUTATION = `#graphql\n  mutation customerDefaultAddressUpdate(\n    $addressId: ID!\n    $customerAccessToken: String!\n  ) {\n    customerDefaultAddressUpdate(\n      addressId: $addressId\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\nconst CREATE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressCreate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n  ) {\n    customerAddressCreate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\nvar _c;\n$RefreshReg$(_c, \"EditAddress\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["address"]
}
