{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).journal.$journalHandle.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\($locale).journal.$journalHandle.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\($locale).journal.$journalHandle.jsx\");\n}\n// REMIX HMR END\n\nimport { json } from '@shopify/remix-oxygen';\nimport { useLoaderData } from '@remix-run/react';\nimport { Image } from '@shopify/hydrogen';\nimport invariant from 'tiny-invariant';\nimport { PageHeader, Section } from '~/components';\nimport { seoPayload } from '~/lib/seo.server';\nimport { routeHeaders } from '~/data/cache';\nimport styles from '../styles/custom-font.css';\nconst BLOG_HANDLE = 'journal';\nexport const headers = routeHeaders;\nexport const links = () => {\n  return [{\n    rel: 'stylesheet',\n    href: styles\n  }];\n};\nexport async function loader({\n  request,\n  params,\n  context\n}) {\n  const {\n    language,\n    country\n  } = context.storefront.i18n;\n  invariant(params.journalHandle, 'Missing journal handle');\n  const {\n    blog\n  } = await context.storefront.query(ARTICLE_QUERY, {\n    variables: {\n      blogHandle: BLOG_HANDLE,\n      articleHandle: params.journalHandle,\n      language\n    }\n  });\n  if (!blog?.articleByHandle) {\n    throw new Response(null, {\n      status: 404\n    });\n  }\n  const article = blog.articleByHandle;\n  const formattedDate = new Intl.DateTimeFormat(`${language}-${country}`, {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(new Date(article?.publishedAt));\n  const seo = seoPayload.article({\n    article,\n    url: request.url\n  });\n  return json({\n    article,\n    formattedDate,\n    seo\n  });\n}\nexport default function Article() {\n  _s();\n  const {\n    article,\n    formattedDate\n  } = useLoaderData();\n  const {\n    title,\n    image,\n    contentHtml,\n    author\n  } = article;\n  return <>\r\n      <PageHeader heading={title} variant=\"blogPost\">\r\n        <span>\r\n          {formattedDate} &middot; {author?.name}\r\n        </span>\r\n      </PageHeader>\r\n      <Section as=\"article\" padding=\"x\">\r\n        {image && <Image data={image} className=\"w-full mx-auto mt-8 md:mt-16 max-w-7xl\" sizes=\"90vw\" loading=\"eager\" />}\n\n        \r\n        <div dangerouslySetInnerHTML={{\n        __html: contentHtml\n      }} className=\"article\" />\n        \r\n      </Section>\r\n    </>;\n}\n_s(Article, \"qBnSPUH1GWNj2cAftD7EOkSCKqU=\", false, function () {\n  return [useLoaderData];\n});\n_c = Article;\nconst ARTICLE_QUERY = `#graphql\n  query ArticleDetails(\n    $language: LanguageCode\n    $blogHandle: String!\n    $articleHandle: String!\n  ) @inContext(language: $language) {\n    blog(handle: $blogHandle) {\n      articleByHandle(handle: $articleHandle) {\n        title\n        contentHtml\n        publishedAt\n        author: authorV2 {\n          name\n        }\n        image {\n          id\n          altText\n          url\n          width\n          height\n        }\n        seo {\n          description\n          title\n        }\n      }\n    }\n  }\n`;\nvar _c;\n$RefreshReg$(_c, \"Article\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,iBAA2B;;;;;;AA+DlB;AAvFT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4DAA8D,EAAE;AAAA,EACzG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAmD;AACrD;AAaO,IAAM,QAAQ,MAAM;AACzB,SAAO,CAAC;AAAA,IACN,KAAK;AAAA,IACL,MAAM;AAAA,EACR,CAAC;AACH;AAyCe,SAAR,UAA2B;AAChC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,SAAO,sFACH;AAAA,uDAAC,cAAW,SAAS,OAAO,SAAQ,YAClC,6DAAC,UACE;AAAA;AAAA,MAAc;AAAA,MAAW,QAAQ;AAAA,SADpC;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,mDAAC,WAAQ,IAAG,WAAU,SAAQ,KAC3B;AAAA,eAAS,mDAAC,SAAM,MAAM,OAAO,WAAU,0CAAyC,OAAM,QAAO,SAAQ,WAA5F;AAAA;AAAA;AAAA;AAAA,aAAoG;AAAA,MAG9G,mDAAC,SAAI,yBAAyB;AAAA,QAC9B,QAAQ;AAAA,MACV,GAAG,WAAU,aAFX;AAAA;AAAA;AAAA;AAAA,aAEqB;AAAA,SANvB;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,OAdG;AAAA;AAAA;AAAA;AAAA,SAeL;AACJ;AACA,GAAG,SAAS,gCAAgC,OAAO,WAAY;AAC7D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AA8BL,IAAI;AACJ,aAAa,IAAI,SAAS;AAE1B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
